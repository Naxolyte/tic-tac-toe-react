{"version":3,"sources":["components/Square.js","components/Board.js","components/Game.js","calculateWinner.js","App.js","reportWebVitals.js","index.js"],"names":["style","background","border","fontSize","fontWeight","cursor","outline","Square","onClick","value","borderRadius","width","height","margin","display","gridTemplate","Board","squares","map","square","i","Game","useState","Array","fill","board","setBoard","xIsNext","setXisNext","winner","lines","length","a","b","c","calculateWinner","boardCopy","textAlign","App","className","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qPAEMA,EAAQ,CACZC,WAAY,UACZC,OAAQ,oBACRC,SAAU,OACVC,WAAY,MACZC,OAAQ,UACRC,QAAS,QAWIC,EARA,SAAC,GAAwB,IAAtBC,EAAqB,EAArBA,QAASC,EAAY,EAAZA,MACzB,OACE,wBAAQT,MAAOA,EAAOQ,QAASA,EAA/B,SACGC,KCXDT,EAAQ,CACZE,OAAQ,qBACRQ,aAAc,OACdC,MAAO,QACPC,OAAQ,QACRC,OAAQ,SACRC,QAAS,OACTC,aAAc,iCAaDC,EAVD,SAAC,GAA0B,IAAxBR,EAAuB,EAAvBA,QAASS,EAAc,EAAdA,QACxB,OACE,qBAAKjB,MAAOA,EAAZ,SACGiB,EAAQC,KAAI,SAACC,EAAQC,GAAT,OACX,cAAC,EAAD,CAAgBX,MAAOU,EAAQX,QAAS,kBAAMA,EAAQY,KAAzCA,SCbrB,IA+CeC,EA/CF,WACX,MAA0BC,mBAASC,MAAM,GAAGC,KAAK,OAAjD,mBAAOC,EAAP,KAAcC,EAAd,KACA,EAA8BJ,oBAAS,GAAvC,mBAAOK,EAAP,KAAgBC,EAAhB,KACMC,ECPD,SAAyBZ,GAW9B,IAVA,IAAMa,EAAQ,CACZ,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,IAEAV,EAAI,EAAGA,EAAIU,EAAMC,OAAQX,IAAK,CACrC,kBAAkBU,EAAMV,GAAxB,GAAOY,EAAP,KAAUC,EAAV,KAAaC,EAAb,KACA,GAAIjB,EAAQe,IAAMf,EAAQe,KAAOf,EAAQgB,IAAMhB,EAAQe,KAAOf,EAAQiB,GACpE,OAAOjB,EAAQe,GAGnB,OAAO,KDVQG,CAAgBV,GA6B/B,OACE,gCACE,cAAC,EAAD,CAAOR,QAASQ,EAAOjB,QAzBP,SAAAY,GAClB,IAAMgB,EAAS,YAAOX,GAElBI,GAAUO,EAAUhB,KAExBgB,EAAUhB,GAAKO,EAAU,IAAM,IAC/BD,EAASU,GACTR,GAAYD,OAmBV,sBAAK3B,MA/BM,CACbW,MAAO,QACPE,OAAQ,YACRwB,UAAW,UA4BT,UACE,4BACGR,EACG,WAAaA,EACb,iBAAmBF,EAAU,IAAM,OAlB3C,wBACEnB,QAAS,WACPkB,EAASH,MAAM,GAAGC,KAAK,OACvBI,GAAW,IAHf,+BEbSU,MARf,WACE,OACE,qBAAKC,UAAW,MAAhB,SACE,cAAC,EAAD,OCKSC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.562aa963.chunk.js","sourcesContent":["import React from 'react';\n\nconst style = {\n  background: '#5fd5f6',\n  border: '2px solid #5b5b5f',\n  fontSize: '30px',\n  fontWeight: '800',\n  cursor: 'pointer',\n  outline: 'none',\n};\n\nconst Square = ({ onClick, value }) => {\n  return (\n    <button style={style} onClick={onClick}>\n      {value}\n    </button>\n  );\n};\n\nexport default Square;\n","import React from 'react';\nimport Square from './Square';\n\nconst style = {\n  border: '4px solid darkblue',\n  borderRadius: '10px',\n  width: '250px',\n  height: '250px',\n  margin: '0 auto',\n  display: 'grid',\n  gridTemplate: 'repeat(3, 1fr)/repeat(3, 1fr)',\n};\n\nconst Board = ({ onClick, squares }) => {\n  return (\n    <div style={style}>\n      {squares.map((square, i) => (\n        <Square key={i} value={square} onClick={() => onClick(i)} />\n      ))}\n    </div>\n  );\n};\n\nexport default Board;\n","import React, { useState } from 'react';\nimport Board from './Board';\nimport { calculateWinner } from '../calculateWinner';\n\nconst Game = () => {\n  const [board, setBoard] = useState(Array(9).fill(null));\n  const [xIsNext, setXisNext] = useState(true);\n  const winner = calculateWinner(board);\n  const styles = {\n    width: '200px',\n    margin: '20px auto',\n    textAlign: 'center',\n  };\n  const handleClick = i => {\n    const boardCopy = [...board];\n    //if user click an occupied square or if game is won, return\n    if (winner || boardCopy[i]) return;\n    //put X or O in clicked square\n    boardCopy[i] = xIsNext ? 'X' : 'O';\n    setBoard(boardCopy);\n    setXisNext(!xIsNext);\n  };\n\n  const renderMoves = () => {\n    return (\n      <button\n        onClick={() => {\n          setBoard(Array(9).fill(null));\n          setXisNext(true);\n        }}\n      >\n        Start Game\n      </button>\n    );\n  };\n\n  return (\n    <div>\n      <Board squares={board} onClick={handleClick} />\n      <div style={styles}>\n        <p>\n          {winner\n            ? 'Winner: ' + winner\n            : 'Next Player: ' + (xIsNext ? 'X' : 'O')}\n        </p>\n        {renderMoves()}\n      </div>\n    </div>\n  );\n};\n\nexport default Game;\n","export function calculateWinner(squares) {\n  const lines = [\n    [0, 1, 2],\n    [3, 4, 5],\n    [6, 7, 8],\n    [0, 3, 6],\n    [1, 4, 7],\n    [2, 5, 8],\n    [0, 4, 8],\n    [2, 4, 6],\n  ];\n  for (let i = 0; i < lines.length; i++) {\n    const [a, b, c] = lines[i];\n    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n      return squares[a];\n    }\n  }\n  return null;\n}\n\n// const squares = [\n//   null, null, null,\n//   'X', 'X', 'O',\n//   null, null, null\n// ];\n\n// console.log(calculateWinner(squares));\n","import './App.css';\nimport React from 'react';\nimport Game from './components/Game';\n\nfunction App() {\n  return (\n    <div className={'App'}>\n      <Game />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}